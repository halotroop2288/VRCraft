buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "com.github.jengelman.gradle.plugins:shadow:5.0.0"
	}
}

plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
}

apply plugin: "com.github.johnrengelman.shadow"

version = project.mod_version

repositories {
	mavenLocal()
	jcenter()
	maven {
		name = "CottonMC"
		url = "http://server.bbkr.space:8081/artifactory/libs-release"
	}
	maven {
		name = "Hexception"
		url = "https://repo.hexeption.dev/repository/hex-mods/"
	}
	maven {
		name = "RedstoneParadox Mods"
		url = "https://dl.bintray.com/redstoneparadox/mods"
	}
	maven {
		name "HalfOf2"
		url "https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/"
	}
	maven {
		name = "JITPack"
		url = "https://jitpack.io"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modRuntime "io.github.prospector:modmenu:${project.modmenu_version}" exclude module: 'fabric-api'

	modImplementation "me.shedaniel:RoughlyEnoughItems:+"
	modRuntime "com.github.SuperCoder7979:databreaker:715b589"

	// Rendering
//	modRuntime "com.github.jellysquid3:lithium-fabric:mc1.16.3-0.5.6"
//  modRuntime "com.github.jellysquid3:sodium-fabric:mc1.16.3-0.1.0" // Abandoned compatibility for now.

	// OpenVR
	jijApi("com.github.halotroop2288:MCOpenVR:v0.0.4")

	// For logging and configuration
	jijApi("io.github.cottonmc:Jankson-Fabric:2.0.1+j1.2.0")
	jijApi("io.github.cottonmc.cotton:Cotton:2.0.0") // Forked from Cotton
	jijApi("ca.stellardrift:confabricate:1.3+3.7.1")
}

// Jar-In-Jar an API mod
def jijApi(dep) {
	dependencies.modApi(dep) {
		exclude module: 'fabric-api'
		exclude module: 'gson'
	}
	dependencies.include dep
}


minecraft {
	accessWidener "src/main/resources/vrcraft.aw"
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier("sources")
	from sourceSets.main.allSource
}

jar {
	classifier("compile")
	from compileJava
	from processResources
	from "LICENSE"
}
